#+property: header-args:lua :tangle init.lua
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src lua :exports none
  -- DO NOT EDIT THIS FILE DIRECTLY
  -- This is a file generated from a literate programing source file
  -- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: My Hammerspoon config file
#+author: eggcaker
#+email: eggcaker@gmail.com

This is my [[http://www.hammerspoon.org/][Hammerspoon]] configuration file.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:init.lua][init.lua]] for the generated file. You can see this in a nicer format on my blog post [[http://zzamboni.org/post/my-hammerspoon-configuration-with-commentary/][My Hammerspoon Configuration, With Commentary]].

If you want to learn more about Hammerspoon, check out my book [[https://leanpub.com/learning-hammerspoon][Learning Hammerspoon]]!

* Table of Contents                                          :TOC_3:noexport:
- [[#general-variables-and-configuration][General variables and configuration]]
- [[#spoon-management][Spoon Management]]
- [[#bettertouchtool][BetterTouchTool]]
- [[#url-dispatching-to-site-specific-browsers][URL Dispatching to site-specific browsers]]
- [[#window-and-screen-manipulation][Window and screen manipulation]]
- [[#organization-and-productivity][Organization and Productivity]]
- [[#system-and-ui][System and UI]]
- [[#other-applications][Other applications]]
- [[#seal][Seal]]
- [[#network-transitions][Network transitions]]
- [[#pop-up-translation][Pop-up translation]]
- [[#miscellaneous-stuff][Miscellaneous stuff]]
- [[#end-of-config-animation][End-of-config animation]]

* General variables and configuration
Global log level. Per-spoon log level can be configured in each =Install:andUse= block below.

#+BEGIN_SRC lua
  hs.logger.defaultLogLevel="info"
  hs.hotkey.alertDuration = 0
  hs.hints.showTitleThresh = 0
  hs.window.animationDuration = 0
  hs.application.enableSpotlightForNameSearches(true)
  hs.ipc.cliInstall()
  hostname = hs.host.localizedName()

#+END_SRC
Define monitor names for layout purposes
#+BEGIN_SRC lua
  display_mbp = "Color LCD"
  display_monitor = "SwitchResX4 - DELL P2416D"
#+END_SRC

I use =hyper= as the modifiers for most of my key bindings, so I define them as variables here for easier referencing.

#+BEGIN_SRC lua
  hyper = {"cmd", "alt", "ctrl", "shift"}
#+END_SRC

#+BEGIN_SRC lua
  -- Draw pretty rounded corners on all screens
  hs.loadSpoon("RoundedCorners")
  spoon.RoundedCorners:start()


  -- ModalMgr Spoon must be loaded explicitly
  hs.loadSpoon("ModalMgr")

  hspoon_list = {
    -- "CircleClock",
    -- "HCalendar",
    "UnsplashZ",
    "WinWin",
    "Astrill",
    "Seal",
    -- "DragTerminal",
    "MyUtils"
  }

  -- Load those Spoons
  for _, v in pairs(hspoon_list) do
    hs.loadSpoon(v)
  end

  hswhints_keys = {hyper, "tab"}
  if string.len(hswhints_keys[2]) > 0 then
    spoon.ModalMgr.supervisor:bind(hswhints_keys[1], hswhints_keys[2], 'Show Window Hints', function()
                                     spoon.ModalMgr:deactivateAll()
                                     hs.hints.windowHints()
    end)
  end


  -- resizeM modal environment
  if spoon.WinWin then
    spoon.ModalMgr:new("resizeM")
    local cmodal = spoon.ModalMgr.modal_list["resizeM"]
    cmodal:bind('', 'escape', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
    cmodal:bind('', 'Q', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
    cmodal:bind('', 'tab', 'Toggle Cheatsheet', function() spoon.ModalMgr:toggleCheatsheet() end)
    cmodal:bind('', 'A', 'Move Leftward', function() spoon.WinWin:stepMove("left") end, nil, function() spoon.WinWin:stepMove("left") end)
    cmodal:bind('', 'D', 'Move Rightward', function() spoon.WinWin:stepMove("right") end, nil, function() spoon.WinWin:stepMove("right") end)
    cmodal:bind('', 'W', 'Move Upward', function() spoon.WinWin:stepMove("up") end, nil, function() spoon.WinWin:stepMove("up") end)
    cmodal:bind('', 'S', 'Move Downward', function() spoon.WinWin:stepMove("down") end, nil, function() spoon.WinWin:stepMove("down") end)
    cmodal:bind('', 'H', 'Lefthalf of Screen', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("halfleft") end)
    cmodal:bind('', 'L', 'Righthalf of Screen', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("halfright") end)
    cmodal:bind('', 'K', 'Uphalf of Screen', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("halfup") end)
    cmodal:bind('', 'J', 'Downhalf of Screen', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("halfdown") end)
    cmodal:bind('', 'Y', 'NorthWest Corner', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("cornerNW") end)
    cmodal:bind('', 'O', 'NorthEast Corner', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("cornerNE") end)
    cmodal:bind('', 'U', 'SouthWest Corner', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("cornerSW") end)
    cmodal:bind('', 'I', 'SouthEast Corner', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("cornerSE") end)
    cmodal:bind('', 'M', 'Fullscreen', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("fullscreen") end)
    cmodal:bind('', 'C', 'Center Window', function() spoon.WinWin:stash() spoon.WinWin:moveAndResize("center") end)
    cmodal:bind('', '=', 'Stretch Outward', function() spoon.WinWin:moveAndResize("expand") end, nil, function() spoon.WinWin:moveAndResize("expand") end)
    cmodal:bind('', '-', 'Shrink Inward', function() spoon.WinWin:moveAndResize("shrink") end, nil, function() spoon.WinWin:moveAndResize("shrink") end)
    cmodal:bind('shift', 'H', 'Move Leftward', function() spoon.WinWin:stepResize("left") end, nil, function() spoon.WinWin:stepResize("left") end)
    cmodal:bind('shift', 'L', 'Move Rightward', function() spoon.WinWin:stepResize("right") end, nil, function() spoon.WinWin:stepResize("right") end)
    cmodal:bind('shift', 'K', 'Move Upward', function() spoon.WinWin:stepResize("up") end, nil, function() spoon.WinWin:stepResize("up") end)
    cmodal:bind('shift', 'J', 'Move Downward', function() spoon.WinWin:stepResize("down") end, nil, function() spoon.WinWin:stepResize("down") end)
    cmodal:bind('', 'left', 'Move to Left Monitor', function() spoon.WinWin:stash() spoon.WinWin:moveToScreen("left") end)
    cmodal:bind('', 'right', 'Move to Right Monitor', function() spoon.WinWin:stash() spoon.WinWin:moveToScreen("right") end)
    cmodal:bind('', 'up', 'Move to Above Monitor', function() spoon.WinWin:stash() spoon.WinWin:moveToScreen("up") end)
    cmodal:bind('', 'down', 'Move to Below Monitor', function() spoon.WinWin:stash() spoon.WinWin:moveToScreen("down") end)
    cmodal:bind('', 'space', 'Move to Next Monitor', function() spoon.WinWin:stash() spoon.WinWin:moveToScreen("next") end)
    cmodal:bind('', '[', 'Undo Window Manipulation', function() spoon.WinWin:undo() end)
    cmodal:bind('', ']', 'Redo Window Manipulation', function() spoon.WinWin:redo() end)
    cmodal:bind('', '`', 'Center Cursor', function() spoon.WinWin:centerCursor() end)

    -- Register resizeM with modal supervisor
    hsresizeM_keys = {"cmd", "space"}
    if string.len(hsresizeM_keys[2]) > 0 then
      spoon.ModalMgr.supervisor:bind(hsresizeM_keys[1], hsresizeM_keys[2], "Enter resizeM Environment", function()
                                       -- Deactivate some modal environments or not before activating a new one
                                       spoon.ModalMgr:deactivateAll()
                                       -- Show an status indicator so we know we're in some modal environment now
                                       spoon.ModalMgr:activate({"resizeM"}, "#B2b2b2")
      end)
    end
  end

  -- Astrill Vpn Toggle
  if spoon.Astrill then
    hsastrill_enable_keys = {hyper, "E"}
    hsastrill_disable_keys = {hyper, "D"}
    spoon.ModalMgr.supervisor:bind(hsastrill_enable_keys[1],
                                   hsastrill_enable_keys[2], 'Enable Astrill',
                                   function() spoon.Astrill:enable() end)

    spoon.ModalMgr.supervisor:bind(hsastrill_disable_keys[1],
                                   hsastrill_disable_keys[2],
                                   'Disable Astrill', function()
                                     spoon.Astrill:disable() end)
  end


  ----------------------------------------------------------------------------------------------------
  -- Register Hammerspoon console
  hsconsole_keys = hsconsole_keys or {"alt", "Z"}
  if string.len(hsconsole_keys[2]) > 0 then
    spoon.ModalMgr.supervisor:bind(hsconsole_keys[1], hsconsole_keys[2], "Toggle Hammerspoon Console", function() hs.toggleConsole() end)
  end

  ----------------------------------------------------------------------------------------------------
  -- Finally we initialize ModalMgr supervisor
  spoon.ModalMgr.supervisor:enter()



  -- Defines for screen watcher
  lastNumberOfScreens = #hs.screen.allScreens()

  -- Define window layouts
  --   Format reminder:
  --     {"App name", "Window name", "Display Name", "unitrect", "framerect", "fullframerect"},
  dual_display = {
    {"iTerm2",        nil, display_monitor, hs.geometry.unitrect(0,   0,   1.0,   1.0),  nil, nil}, 
    {"Emacs",         nil, display_monitor, hs.geometry.unitrect(0,   0,   1.0,   1.0),  nil, nil}, 
    {"Google Chrome", nil, display_monitor, hs.geometry.unitrect(0,   0,   1.0,   1.0),  nil, nil}, 
    {"Trello",        nil, display_mbp,     hs.geometry.unitrect(0.5, 0.5, 0.5,   0.5),  nil, nil}, 
    {"Preview",       nil, display_mbp,     hs.geometry.unitrect(0,   0,   1.0,   1.0),  nil, nil}, 
    {"WeChat",        nil, display_mbp, hs.geometry.unitrect(0,   0,   0.5, 0.5), nil, nil}, 
  }

  -- And now for hotkeys relating to Hyper. First, let's capture all of the functions, then we can just quickly iterate and bind them
  hyperfns = {}

  hyperfns['2'] = function() hs.layout.apply(dual_display) end

  for _hotkey, _fn in pairs(hyperfns) do
    hs.hotkey.bind(hyper, _hotkey, _fn)
  end


  -- use seal
  spoon.Seal:loadPlugins({"apps", "calc", "urlformats", "useractions" })
  spoon.Seal:bindHotkeys({show={{"alt"}, "Space"}})
  spoon.Seal:start()


  spoon.Seal.plugins.useractions.actions =
    {
      ["Hammerspoon docs webpage"] = {
        url = "http://hammerspoon.org/docs/",
        icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),
        hotkey = { hyper, "h" }
      },
      ["Translate using Leo"] = {
        url = "http://dict.leo.org/ende/index_de.html#/search=${query}",
        icon = 'favicon',
        keyword = "leo",
      }
    }


  hs.loadSpoon('Ki')
  spoon.Ki.workflowEvents = {...}
  spoon.Ki:start()

  hs.hotkey.bind(hyper, "R", "Reload Configuration", function() hs.reload() end)


#+END_SRC

Global log level. Per-spoon log level can be configured in each =Install:andUse= block below.

#+begin_src lua
  hs.logger.defaultLogLevel="info"
#+end_src

I use =hyper= and =shift_hyper= as the modifiers for most of my key bindings, so I define them as variables here for easier referencing.

#+begin_src lua
  hyper = {"cmd","alt","ctrl"}
  shift_hyper = {"cmd","alt","ctrl","shift"}
#+end_src

Set up an abbreviation for =hs.drawing.color.x11= since I use it repeatedly later on.

#+begin_src lua
  col = hs.drawing.color.x11
#+end_src

Work's logo, which I use in some of my Seal shortcuts later on.

#+begin_src lua
  swisscom_logo = hs.image.imageFromPath(hs.configdir .. "/files/swisscom_logo_2x.png")
#+end_src

* Spoon Management

Set up SpoonInstall - this is the only spoon that needs to be manually installed (it is already there if you check out this repository), all the others are installed and configured automatically.

#+begin_src lua
  hs.loadSpoon("SpoonInstall")
#+end_src

Configuration of my personal spoon repository, which contains Spoons that have not been merged in the main repo.  See the descriptions at https://zzamboni.github.io/zzSpoons/.

#+begin_src lua
  spoon.SpoonInstall.repos.zzspoons = {
    url = "https://github.com/zzamboni/zzSpoons",
    desc = "zzamboni's spoon repository",
  }
#+end_src

I prefer sync notifications, makes them easier to read.

#+begin_src lua
  spoon.SpoonInstall.use_syncinstall = true
#+end_src

This is just a shortcut to make the declarations below look more readable, i.e. =Install:andUse= instead of =spoon.SpoonInstall:andUse=.

#+begin_src lua
  Install=spoon.SpoonInstall
#+end_src

* BetterTouchTool

I'm currently working on a new [[https://github.com/zzamboni/Spoons/tree/spoon/BetterTouchTool/Source/BetterTouchTool.spoon][BetterTouchTool.spoon]] which provides integration with the [[https://docs.bettertouchtool.net/docs/apple_script.html][BetterTouchTool AppleScript API]]. This is in heavy development! See the configuration for the Hammer spoon in [[#system-and-ui][System and UI]] for an example of how to use it.

#+begin_src lua
  Install:andUse("BetterTouchTool", { loglevel = 'debug' })
  BTT = spoon.BetterTouchTool
#+end_src

* URL Dispatching to site-specific browsers

The [[http://www.hammerspoon.org/Spoons/URLDispatcher.html][URLDispatcher]] spoon makes it possible to open URLs with different browsers. I have created different site-specific browsers using [[https://github.com/dmarmor/epichrome][Epichrome]], which allows me to keep site-specific bookmarks, search settings, etc.

#+begin_src lua
  Install:andUse("URLDispatcher",
                 {
                   config = {
                     url_patterns = {
                       { "https?://issue.swisscom.ch",                       "org.epichrome.app.SwisscomJira" },
                       { "https?://issue.swisscom.com",                      "org.epichrome.app.SwisscomJira" },
                       { "https?://jira.swisscom.com",                       "org.epichrome.app.SwisscomJira" },
                       { "https?://wiki.swisscom.com",                       "org.epichrome.app.SwisscomW408" },
                       { "https?://collaboration.swisscom.com",              "org.epichrome.app.SwisscomCollab" },
                       { "https?://smca.swisscom.com",                       "org.epichrome.app.SwisscomTWP" },
                       { "https?://portal.corproot.net",                     "com.apple.Safari" },
                       { "https?://app.opsgenie.com",                        "org.epichrome.app.OpsGenie" },
                       { "https?://app.eu.opsgenie.com",                     "org.epichrome.app.OpsGenie" },
                       { "https?://fiori.swisscom.com",                      "com.apple.Safari" },
                       { "https?://pmpgwd.apps.swisscom.com/fiori",  "com.apple.Safari" },
                       { "https?://.*webex.com",  "com.google.Chrome" },
                     },
                     -- default_handler = "com.google.Chrome"
                     -- default_handler = "com.electron.brave"
                     default_handler = "com.brave.Browser.dev"
                   },
                   start = true
                 }
  )
#+end_src

* Window and screen manipulation

The [[http://www.hammerspoon.org/Spoons/WindowHalfsAndThirds.html][WindowHalfAndThirds]] spoon sets up multiple key bindings for manipulating the size and position of windows.

#+begin_src lua
  Install:andUse("WindowHalfsAndThirds",
                 {
                   config = {
                     use_frame_correctness = true
                   },
                   hotkeys = 'default'
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/WindowScreenLeftAndRight.html][WindowScreenLeftAndRight]] spoon sets up key bindings for moving windows between multiple screens.

#+begin_src lua
  Install:andUse("WindowScreenLeftAndRight",
                 {
                   hotkeys = 'default'
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/WindowGrid.html][WindowGrid]] spoon sets up a key binding (=Hyper-g= here) to overlay a grid that allows resizing windows by specifying their opposite corners.

#+begin_src lua
  Install:andUse("WindowGrid",
                 {
                   config = { gridGeometries = { { "6x4" } } },
                   hotkeys = {show_grid = {hyper, "g"}},
                   start = true
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/ToggleScreenRotation.html][ToggleScreenRotation]] spoon sets up a key binding to rotate the external screen (the spoon can set up keys for multiple screens if needed, but by default it rotates the first external screen).

#+begin_src lua
  Install:andUse("ToggleScreenRotation",
                 {
                   hotkeys = { first = {hyper, "f15"} }
                 }
  )
#+end_src

* Organization and Productivity

The [[http://www.hammerspoon.org/Spoons/UniversalArchive.html][UniversalArchive]] spoon sets up a single key binding (=Ctrl-Cmd-a=) to archive the current item in Evernote, Mail and Outlook.

#+begin_src lua
  Install:andUse("UniversalArchive",
                 {
                   config = {
                     evernote_archive_notebook = ".Archive",
                     outlook_archive_folder = "Archive (diego.zamboni@swisscom.com)",
                     archive_notifications = false
                   },
                   hotkeys = { archive = { { "ctrl", "cmd" }, "a" } }
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/SendToOmniFocus.html][SendToOmniFocus]] spoon sets up a single key binding (=Hyper-t=) to send the current item to OmniFocus from multiple applications.

#+begin_src lua
  Install:andUse("SendToOmniFocus",
                 {
                   config = {
                     quickentrydialog = false,
                     notifications = false
                   },
                   hotkeys = {
                     send_to_omnifocus = { hyper, "t" }
                   },
                   fn = function(s)
                     s:registerApplication("Swisscom Collab", { apptype = "chromeapp", itemname = "tab" })
                     s:registerApplication("Swisscom Wiki", { apptype = "chromeapp", itemname = "wiki page" })
                     s:registerApplication("Swisscom Jira", { apptype = "chromeapp", itemname = "issue" })
                     s:registerApplication("Brave Browser Dev", { apptype = "chromeapp", itemname = "page" })
                   end
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/EvernoteOpenAndTag.html][EvernoteOpenAndTag]] spoon sets up some missing key bindings for note manipulation in Evernote.

#+begin_src lua
  Install:andUse("EvernoteOpenAndTag",
                 {
                   hotkeys = {
                     open_note = { hyper, "o" },
                     ["open_and_tag-+work,+swisscom"] = { hyper, "w" },
                     ["open_and_tag-+personal"] = { hyper, "p" },
                     ["tag-@zzdone"] = { hyper, "z" }
                   }
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/TextClipboardHistory.html][TextClipboardHistory]] spoon implements a clipboard history, only for text items. It is invoked with =Cmd-Shift-v=.

This is disabled for the moment as I experiment with BetterTouchTool's built-in clipboard history, which I have bound to the same key combination for consistency in my workflow.

#+begin_src lua
  Install:andUse("TextClipboardHistory",
                 {
                   disable = true,
                   config = {
                     show_in_menubar = false,
                   },
                   hotkeys = {
                     toggle_clipboard = { { "cmd", "shift" }, "v" } },
                   start = true,
                 }
  )
#+end_src

* System and UI

The [[https://zzamboni.github.io/zzSpoons/Hammer.html][Hammer]] spoon (get it? hehe) is a simple wrapper around some common Hamerspoon configuration variables. Note that this gets loaded from my personal repo, since it's not in the official repository.

#+begin_src lua
  Install:andUse("Hammer",
                 {
                   repo = 'zzspoons',
                   config = { auto_reload_config = false },
                   hotkeys = {
                     config_reload = {hyper, "r"},
                     toggle_console = {hyper, "y"}
                   },
                   fn = function(s)
                     BTT:bindSpoonActions(s,
                                          { config_reload = {
                                              kind = 'touchbarButton',
                                              uuid = "FF8DA717-737F-4C42-BF91-E8826E586FA1",
                                              name = "Restart",
                                              icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),
                                              color = hs.drawing.color.x11.orange,
                                          }
                     })
                   end,
                   start = true
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/Caffeine.html][Caffeine]] spoon allows preventing the display and the machine from sleeping. I use it frequently when playing music from my machine, to avoid having to unlock the screen whenever I want to change the music.

#+begin_src lua
    Install:andUse("Caffeine", {
                     start = true,
                     hotkeys = {
                       toggle = { hyper, "1" }
                     },
                     fn = function(s)
                       BTT:bindSpoonActions(s, {
                                              toggle = {
                                                kind = 'touchbarWidget',
                                                uuid = '72A96332-E908-4872-A6B4-8A6ED2E3586F',
                                                name = 'Caffeine',
                                                widget_code = [[
    do
      title = " "
      icon = hs.image.imageFromPath(spoon.Caffeine.spoonPath.."/caffeine-off.pdf")
      if (hs.caffeinate.get('displayIdle')) then
        icon = hs.image.imageFromPath(spoon.Caffeine.spoonPath.."/caffeine-on.pdf")
      end
      print(hs.json.encode({ text = title, icon_data = BTT:hsimageToBTTIconData(icon) }))
    end
      ]],
                                                code = "spoon.Caffeine.clicked()",
                                                widget_interval = 1,
                                                color = hs.drawing.color.x11.black,
                                                icon_only = true,
                                                icon_size = hs.geometry.size(15,15),
                                                BTTTriggerConfig = {
                                                  BTTTouchBarFreeSpaceAfterButton = 0,
                                                  BTTTouchBarItemPadding = -6,
                                                },
                                              }
                       })
                     end
    })
#+end_src

The [[http://www.hammerspoon.org/Spoons/MenubarFlag.html][MenubarFlag]] spoon colorizes the menubar according to the selected keyboard language or layout (functionality inspired by [[https://pqrs.org/osx/ShowyEdge/index.html.en][ShowyEdge]]). I use English, Spanish and German, so those are the colors I have defined.

#+begin_src lua
  Install:andUse("MenubarFlag",
                 {
                   config = {
                     colors = {
                       ["U.S."] = { },
                       Spanish = {col.green, col.white, col.red},
                       German = {col.black, col.red, col.yellow},
                     }
                   },
                   start = true
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/MouseCircle.html][MouseCircle]] spoon shows a circle around the mouse pointer when triggered. I have it disabled for now because I have the macOS [[https://support.apple.com/kb/PH25507?locale=en_US&viewlocale=en_US][shake-to-grow feature]] enabled.

#+begin_src lua
  Install:andUse("MouseCircle",
                 {
                   disable = true,
                   config = {
                     color = hs.drawing.color.x11.rebeccapurple
                   },
                   hotkeys = {
                     show = { hyper, "m" }
                   }
                 }
  )
#+end_src

One of my original bits of Hammerspoon code, now made into a spoon (although I keep it disabled, since I don't really use it). The [[http://www.hammerspoon.org/Spoons/ColorPicker.html][ColorPicker]] spoon shows a menu of the available color palettes, and when you select one, it draws swatches in all the colors in that palette, covering the whole screen. You can click on any of them to copy its name to the clipboard, or cmd-click to copy its RGB code.

#+begin_src lua
  Install:andUse("ColorPicker",
                 {
                   disable = true,
                   hotkeys = {
                     show = { shift_hyper, "c" }
                   },
                   config = {
                     show_in_menubar = false,
                   },
                   start = true,
                 }
  )
#+end_src

I use Homebrew, and when I run =brew update=, I often wonder about what some of the formulas shown are (names are not always obvious). The [[http://www.hammerspoon.org/Spoons/BrewInfo.html][BrewInfo]] spoon allows me to point at a Formula or Cask name and press =Hyper-b= or =Hyper-c= (for Casks) to have the output of the =info= command in a popup window, or the same key with =Shift-Hyper= to open the URL of the Formula/Cask.

#+begin_src lua
  Install:andUse("BrewInfo",
                 {
                   config = {
                     brew_info_style = {
                       textFont = "Inconsolata",
                       textSize = 14,
                       radius = 10 }
                   },
                   hotkeys = {
                     -- brew info
                     show_brew_info = {hyper, "b"},
                     open_brew_url = {shift_hyper, "b"},
                     -- brew cask info
                     show_brew_cask_info = {hyper, "c"},
                     open_brew_cask_url = {shift_hyper, "c"},
                   }
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/KSheet.html][KSheet]] spoon traverses the current application's menus and builds a cheatsheet of the keyboard shortcuts, showing it in a nice popup window.

#+begin_src lua :tangle no
  Install:andUse("KSheet",
                 {
                   hotkeys = {
                     toggle = { hyper, "/" }
  }})
#+end_src

The [[http://www.hammerspoon.org/Spoons/TimeMachineProgress.html][TimeMachineProgress]] spoon shows an indicator about the progress of the ongoing Time Machine backup. The indicator disappears when there is no backup going on.

#+begin_src lua
  Install:andUse("TimeMachineProgress",
                 {
                   start = true
                 }
  )
#+end_src

* Other applications

The [[http://www.hammerspoon.org/Spoons/ToggleSkypeMute.html][ToggleSkypeMute]] spoon sets up the missing keyboard bindings for toggling the mute button on Skype and Skype for Business. I'm not fully happy with this spoon - it should auto-detect the application instead of having separate keys for each application, and it could be extended to more generic use.

#+begin_src lua
  Install:andUse("ToggleSkypeMute",
                 {
                   hotkeys = {
                     toggle_skype = { shift_hyper, "v" },
                     toggle_skype_for_business = { shift_hyper, "f" }
                   }
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/HeadphoneAutoPause.html][HeadphoneAutoPause]] spoon implements auto-pause/resume for iTunes, Spotify and others when the headphones are unplugged.

#+begin_src lua
  Install:andUse("HeadphoneAutoPause",
                 {
                   start = true
                 }
  )
#+end_src

* Seal

The [[http://www.hammerspoon.org/Spoons/Seal.html][Seal]] spoon is a powerhouse - it implements a Spotlight-like launcher, but which allows for infinite configurability of what can be done or searched from the launcher window. I use Seal as my default launcher, triggered with =Cmd-space=, although I still keep Spotlight around under =Hyper-space=, mainly for its search capabilities.

We start by loading the spoon, and specifying which plugins we want.

#+begin_src lua :noweb no-export
  Install:andUse("Seal",
                 {
                   hotkeys = { show = { {"cmd"}, "space" } },
                   fn = function(s)
                     s:loadPlugins({"apps", "calc", "safari_bookmarks", "screencapture", "useractions"})
                     s.plugins.safari_bookmarks.always_open_with_safari = false
                     s.plugins.useractions.actions =
                       {
                           <<useraction-definitions>>
                       }
                     s:refreshAllCommands()
                   end,
                   start = true,
                 }
  )
#+end_src

The =useractions= Seal plugin allows me to define my own shortcuts. For example, a bookmark to the Hammerspoon documentation page:

#+begin_src lua :tangle no :noweb-ref useraction-definitions
  ["Hammerspoon docs webpage"] = {
    url = "http://hammerspoon.org/docs/",
    icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),
  },
#+end_src

Or to manually trigger my work/non-work transition scripts (see below):

#+begin_src lua :tangle no :noweb-ref useraction-definitions
  ["Leave corpnet"] = {
    fn = function()
      spoon.WiFiTransitions:processTransition('foo', 'corpnet01')
    end,
    icon = swisscom_logo,
  },
  ["Arrive in corpnet"] = {
    fn = function()
      spoon.WiFiTransitions:processTransition('corpnet01', 'foo')
    end,
    icon = swisscom_logo,
  },
#+end_src

Or to translate things using [[https://dict.leo.org/][dict.leo.org]]:

#+begin_src lua :tangle no :noweb-ref useraction-definitions
  ["Translate using Leo"] = {
    url = "http://dict.leo.org/englisch-deutsch/${query}",
    icon = 'favicon',
    keyword = "leo",
  }
#+end_src

* Network transitions

The [[http://www.hammerspoon.org/Spoons/WiFiTransitions.html][WiFiTransitions]] spoon allows triggering arbitrary actions when the SSID changes. I am interested in the change from my work network (corpnet01) to other networks, mainly because at work I need a proxy for all connections to the Internet. I have two applications which don't handle these transitions gracefully on their own: Spotify and Adium. So I have written a couple of functions for helping them along.

The =reconfigSpotifyProxy= function quits Spotify, updates the proxy settings in its config file, and restarts it.

#+begin_src lua
  function reconfigSpotifyProxy(proxy)
    local spotify = hs.appfinder.appFromName("Spotify")
    local lastapp = nil
    if spotify then
      lastapp = hs.application.frontmostApplication()
      spotify:kill()
      hs.timer.usleep(40000)
    end
    --   hs.notify.show(string.format("Reconfiguring %sSpotify", ((spotify~=nil) and "and restarting " or "")), string.format("Proxy %s", (proxy and "enabled" or "disabled")), "")
    -- I use CFEngine to reconfigure the Spotify preferences
    cmd = string.format("/usr/local/bin/cf-agent -K -f %s/files/spotify-proxymode.cf%s", hs.configdir, (proxy and " -DPROXY" or " -DNOPROXY"))
    output, status, t, rc = hs.execute(cmd)
    if spotify and lastapp then
      hs.timer.doAfter(3,
                       function()
                         if not hs.application.launchOrFocus("Spotify") then
                           hs.notify.show("Error launching Spotify", "", "")
                         end
                         if lastapp then
                           hs.timer.doAfter(0.5, hs.fnutils.partial(lastapp.activate, lastapp))
                         end
      end)
    end
  end
#+end_src

The =reconfigAdiumProxy= function uses AppleScript to tell Adium about the change without having to restart it.

#+begin_src lua
  function reconfigAdiumProxy(proxy)
    --   hs.notify.show("Reconfiguring Adium", string.format("Proxy %s", (proxy and "enabled" or "disabled")), "")
    local script = string.format([[
  tell application "Adium"
    repeat with a in accounts
      if (enabled of a) is true then
        set proxy enabled of a to %s
      end if
    end repeat
    go offline
    go online
  end tell
  ]], hs.inspect(proxy))
    hs.osascript.applescript(script)
  end
#+end_src

The configuration for the WiFiTransitions spoon invoked these functions with the appropriate parameters.

#+begin_src lua
  Install:andUse("WiFiTransitions",
                 {
                   config = {
                     actions = {
                       -- { -- Test action just to see the SSID transitions
                       --    fn = function(_, _, prev_ssid, new_ssid)
                       --       hs.notify.show("SSID change", string.format("From '%s' to '%s'", prev_ssid, new_ssid), "")
                       --    end
                       -- },
                       { -- Enable proxy in Spotify and Adium config when joining corp network
                         to = "corpnet01",
                         fn = {hs.fnutils.partial(reconfigSpotifyProxy, true),
                               hs.fnutils.partial(reconfigAdiumProxy, true),
                         }
                       },
                       { -- Disable proxy in Spotify and Adium config when leaving corp network
                         from = "corpnet01",
                         fn = {hs.fnutils.partial(reconfigSpotifyProxy, false),
                               hs.fnutils.partial(reconfigAdiumProxy, false),
                         }
                       },
                     }
                   },
                   start = true,
                 }
  )
#+end_src

* Pop-up translation

I live in Switzerland, and my German is far from perfect, so the [[http://www.hammerspoon.org/Spoons/PopupTranslateSelection.html][PopupTranslateSelection]] spoon helps me a lot. It allows me to select some text and, with a keystroke, translate it to any of three languages using Google Translate. Super useful! Usually, Google's auto-detect feature works fine, so the =translate_to_<lang>= keys are sufficient. I have some =translate_<from>_<to>= keys set up for certain language pairs for when this doesn't quite work (I don't think I've ever needed them).

#+begin_src lua
  local wm=hs.webview.windowMasks
  Install:andUse("PopupTranslateSelection",
                 {
                   disable = true,
                   config = {
                     popup_style = wm.utility|wm.HUD|wm.titled|wm.closable|wm.resizable,
                   },
                   hotkeys = {
                     translate_to_en = { hyper, "e" },
                     translate_to_de = { hyper, "d" },
                     translate_to_es = { hyper, "s" },
                     translate_de_en = { shift_hyper, "e" },
                     translate_en_de = { shift_hyper, "d" },
                   }
                 }
  )
#+end_src

I am now testing [[http://www.hammerspoon.org/Spoons/DeepLTranslate.html][DeepLTranslate]], based on PopupTranslateSelection but which uses the [[https://www.deepl.com/en/translator][DeepL translator]].

#+begin_src lua
  Install:andUse("DeepLTranslate",
                 {
                   config = {
                     popup_style = wm.utility|wm.HUD|wm.titled|wm.closable|wm.resizable,
                   },
                   hotkeys = {
                     translate = { hyper, "e" },
                   }
                 }
  )
#+end_src

* Miscellaneous stuff

In my =init-local.lua= file I keep some experimental or private stuff that I don't want to publish in my main config.

#+begin_src lua
  local localstuff=loadfile(hs.configdir .. "/init-local.lua")
  if localstuff then
    localstuff()
  end
#+end_src

* End-of-config animation

The [[http://www.hammerspoon.org/Spoons/FadeLogo.html][FadeLogo]] spoon simply shows an animation of the Hammerspoon logo to signal the end of the config load.

#+begin_src lua
  Install:andUse("FadeLogo",
                 {
                   config = {
                     default_run = 1.0,
                   },
                   start = true
                 }
  )
#+end_src

If you don't want to use FadeLogo, you can have a regular notification.

#+begin_src lua
  -- hs.notify.show("Welcome to Hammerspoon", "Have fun!", "")
#+end_src
