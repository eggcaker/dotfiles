$UPDATE_OS_ENVIRON = True

{"CloudHub.Azure.Storage.BlobContainer":{"connection":{"type":"blobContainer","container":"scriptint","serviceEndpoint":"https://scriptsa.blob.core.windows.net","credentials":[{"type":"sas","sasToken":"sv=2019-10-10&st=2020-10-19T05%3A45%3A01Z&se=2021-10-20T05%3A45%3A00Z&sr=c&sp=racwl&sig=t9T1%2FsOtzXmOaogB0428%2Fs8PelvCh9lw5BWTW5kff7U%3D"}]},"connectionString":"BlobEndpoint=https://scriptsa.blob.core.windows.net;SharedAccessSignature=sv=2019-10-10&st=2020-10-19T05%3A45%3A01Z&se=2021-10-20T05%3A45%3A00Z&sr=c&sp=racwl&sig=t9T1%2FsOtzXmOaogB0428%2Fs8PelvCh9lw5BWTW5kff7U%3D","containerName":"scriptint","accountUri":"https://scriptsa.blob.core.windows.net","sasToken":"sv=2019-10-10&st=2020-10-19T05%3A45%3A01Z&se=2021-10-20T05%3A45%3A00Z&sr=c&sp=racwl&sig=t9T1%2FsOtzXmOaogB0428%2Fs8PelvCh9lw5BWTW5kff7U%3D"}}

import os, uuid, errno
from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient

try:
    print(container_name)
except NameError:
    container_name = 'scriptint'


connect_str = os.getenv('AZURE_STORAGE_CONNECTION_STRING')

blob_service_client = BlobServiceClient.from_connection_string(connect_str)
container_client = blob_service_client.get_container_client(container_name)


def _lf():
    blist = container_client.list_blobs()
    for b in blist:
        print(str(b.size) + "\t" + b.name)

aliases['lf'] = _lf


def _upload(names):
    localname = names[0]
    if (len(names) == 1):
        rname = os.path.basename(localname)
    else:
        rname = names[1]

    print(localname, rname)
    blob_client = blob_service_client.get_blob_client(container=container_name, blob=rname)

    with open(localname, "rb") as data:
        blob_client.upload_blob(data, overwrite=True)


aliases['uf'] = _upload


def _delete(name):
    container_client.delete_blob(name[0])


aliases['rf'] = _delete


def _get_blob(names):
    name = names[0]
    blob_client = container_client.get_blob_client(name)
    download_file_path = os.path.join(name)

    if not os.path.exists(os.path.dirname(download_file_path)):
        try:
            os.makedirs(os.path.dirname(download_file_path))
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise

    with open(download_file_path, "wb") as download_file:
        download_file.write(blob_client.download_blob().readall())


aliases['gf'] = _get_blob
