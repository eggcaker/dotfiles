import json
import pendulum
import pandas

def get_date_string(seconds, offset):
    return pendulum.from_timestamp(int(seconds), tz=int(offset) / 60).format('YYYY-MM-DD HH:mm:ss')


removed_daily_fields = [
    'Id',
    'activityType',
    'createdDate',
    'deleted',
    'endTime',
    'floors',
    'met',
    'mood',
    'partnerSyncHash',
    'partnerSyncState',
    'recordedBy',
    'recordedForDatetimeIso8601',
    'recordedTimezoneOffsetInMinutes',
    'recordedUnixtime',
    'startTime',
    'sync_activity_id',
    'sync_activity_state',
    'user_id',
    # minutely
    'endTimeTimezoneOffset',
    'lastSeenStepCounterReading',
    'lastSeenStepCounterTimeStamp',
    'recordType',
    'activityName',
    'payload',
    'comments',
    'recordedByPayload',
    'sync_activity_hash',
    'startTimeTimezoneOffset',
    'recordedForDateTimezoneOffset'
]

with open('./MDData.db.json') as db:
    raw_json = json.load(db)

daily = pandas.DataFrame.from_dict(raw_json['MDData.db']['dailyActivityLog'])
minutely = pandas.DataFrame.from_dict(raw_json['MDData.db']['minutelyActivityLog'])


# if find some data not plotable then uncomment this line to clenup the data
# daily.drop(daily[daily.recordedForDate.astype('int') < 2000].index, inplace=True)

daily.activeTimeInSeconds = daily.activeTimeInSeconds.astype('int64', copy=False)
daily.distanceInMeters = daily.distanceInMeters.astype('float', copy=False)
daily.calories = daily.calories.astype('float', copy=False)
daily.steps= daily.steps.astype('int64', copy=False)

minutely.distanceInMeters = minutely.distanceInMeters.astype('float', copy=False)
minutely.calories = minutely.calories.astype('float', copy=False)
minutely.steps= minutely.steps.astype('int64', copy=False)

dates = []

for idx, row in daily.iterrows():
    d = pandas.to_datetime(int(row['recordedForDate']), unit='s') + pandas.Timedelta(int(row['recordedTimezoneOffsetInMinutes']), unit='m')
    dates.append(d)

daily.recordedForDate = dates

minute_dates = []

for idx, row in minutely.iterrows():
    d = pandas.to_datetime(int(row['recordedForDate']), unit='s') + pandas.Timedelta(int(row['recordedForDateTimezoneOffset']), unit='m')
    minute_dates.append(d)

minutely.recordedForDate = minute_dates


daily.drop(removed_daily_fields, axis=1, inplace=True,  errors='ignore')
minutely.drop(removed_daily_fields, axis=1, inplace=True,  errors='ignore')

daily_key = [x for x in map( lambda x: x[:10],  daily.recordedForDate.astype('str').tolist())]
daily.index = daily_key
minutely_key = [x for x in map( lambda x: x[:10],  minutely.recordedForDate.astype('str').tolist())]
minutely.index = minutely_key

daily.sort_index(ascending=False, inplace=True)
minutely.sort_index(ascending=False, inplace=True)

d = daily.round({'calories': 2, 'distanceInMeters':2})
m = minutely.round({'calories': 2, 'distanceInMeters':2})
