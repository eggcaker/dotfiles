# -*-mode: python -*-

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

$LANG = "en_US.UTF-8"
$LANGUAGE = "en_US.UTF-8"
$LC_ALL = "en_US.UTF-8"
$LC_CTYPE = "en_US.UTF-8"

$XONSH_DEBUG = 1
$XONSH_SHOW_TRACEBACK = True
$EDITOR="vim"
$VISUAL="vim"

$LS_COLORS = 'rs=0:di=01;36:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:'

$PATH.append("/usr/local/opt/decompile-apk/")
$PATH.insert(0, "~/.dotfiles/bin")
$PATH.insert(0, "/usr/local/Cellar/rakudo-star/2019.03/share/perl6/site/bin")
$PATH.insert(0, "/usr/local/share/dotnet/")
$PATH.insert(0, "/usr/local/bin")

$XONSH_COLOR_STYLE = "monokai"
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
$WIN_UNICODE_CONSOLE = False
$UPDATE_COMPLETIONS_ON_KEYPRES = True
$AUTO_PUSHD = True

$XONSH_HISTORY_SIZE = (2000, 'commands')
$XONSH_HISTORY_BACKEND = 'sqlite'
$HISTCONTROL = 'ignoredups'

$WORK_NOTE_PATH = "$HOME/src/work/working-notes"
# adoptopenjdk-9.jdk
$JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home"
$ANDROID_SDK_ROOT = "/usr/local/share/android-sdk"
$ANDROID_HOME = "/usr/local/share/android-sdk"
$ANDROID_NDK = "/usr/local/opt/android-ndk/android-ndk-r14b"


aliases['.'] = ['cd', '..']
aliases['..'] = ['cd', '../..']
aliases['...'] = ['cd', '../../..']
aliases['....'] = ['cd', '../../../..']
aliases['a'] = ['cd', '~/Desktop/lab']
aliases['grep'] = 'grep -i --color=always'
aliases['mkdir'] = 'mkdir -p'
aliases['l'] = ['ls', '-G']
aliases['ll'] = ['ls', '-lh', '-F', '-G', '-v']

# git aliases
aliases['gc'] = 'git commit -v'
aliases['gl'] = ['git', 'log', '--oneline', '--all', '--graph', '--decorate', '--color']
aliases['it'] = 'git'
aliases['gi'] = 'git'
aliases['tit'] = 'git'
aliases['sl'] = 'ls'
aliases['last'] = ['git', 'log', '--pretty=format:"%C(yellow)%h%x09%Creset%an%x09%x09%s"', '--decorate', '-10']

aliases['pa'] = ['cd', '~/src/personal/xiaobing/XiaoiceAICProjs/private/XiaoIceBMWDemo/XiaoiceDemo']
aliases['pw'] = ['cd', '~/src/personal/xiaobing/Xiaobing/private/src/Workflow.Scripts']

# Emacs
aliases['e'] = ['emacsclient', '-nw']
aliases['eg'] = ['emacsclient', '-n']
aliases['e.kill'] = ['pkill', '-SIGUSR2 -i', 'Emacs']
aliases['ssh-add'] = ['ssh-add', '-t', '403200m']
aliases['ale'] = ['adb', 'logcat', '-s', 'EB']
aliases['i'] = ['kitty', '+kitten', 'icat']
aliases['d'] = ['kitty', '+kitten', 'diff']
aliases['ssh'] = ['kitty', '+kitten', 'ssh']

aliases['s.load_data'] = ['source', '~/.dotfiles/bin/segments/load_stock_env']
aliases['p.load_azure'] = ['source', '~/.dotfiles/bin/segments/load_azure_storage']
aliases['p.load_workflow'] = ['source', '~/.dotfiles/bin/segments/load_workflow_azure']


def pt(data):
    """Print the tablify data as a orgtabl format."""
    from tabulate import tabulate
    print(tabulate(data[1:], headers=data[0], tablefmt='orgtbl'))


def _a_top_activity():
    """Get the top activity on connected android device."""
    print($(adb shell dumpsys window windows | rg "mCurrentFocus|mFocusedApp"))


def _p_dl():
    """Decrypt the xlog file with python2 inside docker image"""
    docker run  -v $PWD:/tmp/xlog  -ti xlog  /usr/bin/decode_mars_log  /tmp/xlog/

def _p_unzip_s3_log():
 for dir in $(ls).split():
     cd @(dir)
     unzip *.zip
     p.dl *
     rm *.xlog
     rm *.zip
     cd ..

aliases['p.unzip_s3_log'] = _p_unzip_s3_log
aliases['p.dl'] = _p_dl
aliases['a.top_activity'] = _a_top_activity
aliases['a.pc'] = ['adb', 'shell', 'pm', 'clear', 'cc.pacer.androidapp']
aliases['a.ps'] = ['adb', 'shell', 'am', 'start', 'cc.pacer.androidapp/.ui.splash.SplashActivity']
aliases['a.dc'] = ['adb', 'shell', 'pm', 'clear', 'com.mandian.android.dongdong']
aliases['a.plog'] = ['adb', 'pull', '/mnt/sdcard/Android/data/cc.pacer.androidapp/files/Download/xlog', '.']

aliases['java9'] = ['jhome', '-v', '9.0.1']
aliases['java8'] = ['jhome', '-v', '1.8.0_141']
aliases['js'] = ['java', '-jar', '/opt/java-libs/try-artifact-0.3.0.jar']


def _redex():
    """ run redex with docker"""
    docker run -it  -v /usr/local/share/android-sdk:/opt/android-sdk-linux -v ./:/redex redex redex ./app-play-vp5.8.1.apk -o ./dex.apk

aliases['redex'] = _redex

aliases['p.load_pacer_data'] = ['source', '~/.dotfiles/bin/segments/load_pacer_activity_data']

aliases['p.load_start_time_data'] = ['source', '~/.dotfiles/bin/segments/load_app_start_time_data']

aliases['p.load_ana_script'] = ['source', '~/.dotfiles/bin/segments/load_databack_ana_script']

def _jshell():
    """ Run the java shell with some external library"""
    docker run -v /opt/java-libs:/tmp -it openjdk:9-jdk bin/jshell --class-path /tmp/joda-time-2.10.jar


aliases['jshell'] = _jshell

# python chart
aliases['imcat'] = lambda args, stdin: print('\033]1337;File=inline=1;height=80%%:%s\a\n' % stdin)

$SHELL_TYPE = 'prompt_toolkit'
$VI_MODE = True

from prompt_toolkit.filters import ViInsertMode
from prompt_toolkit.key_binding.vi_state import InputMode

@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    handler = bindings.add_binding # ptk2
    # handler = bindings.registry.add_binding ptk1

    @handler('f', 'd')
    def exit_insert_mode(event, filter=ViInsertMode):
        vi_state = event.cli.vi_state
        vi_state.input_mode = InputMode.NAVIGATION


$PROMPT_FIELDS['prompt_end'] = lambda: '{RED}$ ' if __xonsh__.history.last_cmd_rtn else '{BLUE}$ '
$XONSH_SHOW_TRACEBACK = False


$PROMPT = '{env_name:{} }{BOLD_BLUE} {cwd}{branch_color}{curr_branch: {}}{RESET} {BOLD_BLUE}{prompt_end}{RESET}'

# nnn configurations 
$NNN_PLUG='f:finder;o:fzopen;p:mocplay;d:diffs;t:nmount;v:imgview'


# matplotlib with xonsh
$ITERMPLOT='rv'
$ITERMPLOT_LINES=10
$ITERMPLOT_FRAMES=40
$MPLBACKEND="module://itermplot"


source-bash ~/.private

source-bash $(/usr/libexec/path_helper -s)


# Coloured man page support
# using 'less' env vars (format is '\E[<brightness>;<colour>m')
$LESS_TERMCAP_mb = "\033[01;31m"     # begin blinking
$LESS_TERMCAP_md = "\033[01;31m"     # begin bold
$LESS_TERMCAP_me = "\033[0m"         # end mode
$LESS_TERMCAP_so = "\033[01;44;36m"  # begin standout-mode (bottom of screen)
$LESS_TERMCAP_se = "\033[0m"         # end standout-mode
$LESS_TERMCAP_us = "\033[00;36m"     # begin underline
$LESS_TERMCAP_ue = "\033[0m"         # end underline


$BASE16_SHELL = $HOME + "/.config/base16-shell/"

# XONSH WIZARD START
xontrib load coreutils vox z mpl fzf-widgets kitty ssh_agent onepath pyenv 
# XONSH WIZARD END

from forbiddenfruit import curse
import hashlib
import urllib.parse


# extension functions to sting
def md5(self):
    m = hashlib.md5()
    m.update(self.encode('UTF-8'))
    return m.hexdigest()

curse(str, "md5", md5)

def url_encode(self):
    return urllib.parse.quote(self)

def url_decode(self):
    return urllib.parse.unquote(self)

curse(str, "md5", md5)
curse(str, "url_encode", url_encode)
curse(str, "url_decode", url_decode)
curse(int, 'tc', lambda self: hex(int(255*self/100)))
curse(float, 'tc', lambda self: hex(int(255*self/100)))


$BASH_COMPLETIONS.insert(0, '/opt/local/share/bash-completion/bash_completion')

aliases['chat_server'] = ['ssh', 'azureuser@bmw-en-serving.westeurope.cloudapp.azure.com']
aliases['ut'] = ['mono', '/Library/Frameworks/IronPython.framework/Versions/2.7.10/bin/ipy.exe',   '/Users/eggcaker/src/personal/xiaobing/Xiaobing/private/src/Workflow.Scripts/XiaoiceUnitTest.py', 'DeviceControlDuplexCmd.py']
aliases['ip'] = ['mono', '/Library/Frameworks/IronPython.framework/Versions/2.7.10/bin/ipy.exe']
#source-bash '~/src/apps/google-cloud-sdk/completion.bash.inc'
