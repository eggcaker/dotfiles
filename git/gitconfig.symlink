[user]
  name = eggcaker
  email = eggcaker@gmail.com
[author]
  name = eggcaker
  email = eggcaker@gmail.com

[alias]
  # View the SHA, description, and history graph of the latest 20 commits
  up = pull --rebase --autostash
  l = log --pretty=oneline -n 20 --graph
  # View the current working tree status using the short format
  s = status -s
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  # Clone a repository including all submodules
  c = clone --recursive
  # Commit all changes
  ca = !git add -A && git commit -av
  # Switch to a branch, creating it if necessary
  go = checkout -B
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # Undo a `git push`
  undopush = push -f origin HEAD^:master
  co = checkout
  ci = commit
  rb = rebase
  cam = commit -a -m
  r = remote
  rv = remote -v
  sts = status -s
  b  = branch
  d      = diff -b
  dc     = diff -b --cached
  ds     = diff -b --stat
  st      = status -s
  ps     = log --pretty=oneline origin..master

  # like "git log", but include the diffs
  w      = whatchanged -p
  # changes since we last did a push
  wo     = whatchanged -p origin..
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
  gi = "!gi() { curl http://www.gitignore.io/api/$@ ;}; gi"
  create-pull-request = !sh -c 'stash pull-request $0 $@'

[apply]
  # Detect whitespace errors when applying a patch
  #whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
  #whitespace = space-before-tab,indent-with-non-tab,trailing-space
  quotepath = false
  editor = vim

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
  remote = origin
  merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git@bitbucket.org:"]
  insteadOf = "bb:"
[mergetool]
  keepBackup = true

[push]
  default = simple
[filter "media"]
  clean = git-media-clean %f
  smudge = git-media-smudge %f
[ghi]
  token = !security find-internet-password -a eggcaker -s github.com -l 'ghi token' -w

[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true
[pull]
  rebase = true

[rebase]
    instructionFormat = %s [%an]

[github]
	user = eggcaker
	oauth-token = $GITHUB_OAUTH_TOKEN
[commit]
	gpgsign = false
[magit]
	hideCampaign = true
[dotfiles]
	lastupdate = 201712141940
